input {
  kafka {
    bootstrap_servers => "kafka:29092"
    topics => ["call-alerts"]
    codec => json
    decorate_events => true
  }
}

filter {
  mutate {
    remove_field => ["@version"]
    convert => {
      "val_euro" => "float"
      "duration" => "integer"
    }
    add_field => { "debug" => "Filter applied" }
  }
  
  # Convert timestamp fields to proper timestamp format
  date {
    match => ["timestamp", "yyyy-MM-dd HH:mm:ss.SSS"]
    target => "@timestamp_tmp"
  }
  mutate {
    convert => { "@timestamp_tmp" => "string" }
    rename => { "@timestamp_tmp" => "timestamp" }
  }

  date {
    match => ["event_time", "yyyy-MM-dd HH:mm:ss.SSS"]
    target => "@event_time_tmp"
  }
  mutate {
    convert => { "@event_time_tmp" => "string" }
    rename => { "@event_time_tmp" => "event_time" }
  }
}

output {
  stdout {
    codec => rubydebug
  }

  jdbc {
    driver_jar_path => "/usr/share/logstash/jdbc/postgresql.jar"
    driver_class => "org.postgresql.Driver"
    connection_string => "jdbc:postgresql://postgres:5432/mydb"
    username => "postgres"
    password => "postgres"
    statement => [
      "INSERT INTO call_alerts (xdrid, tenant, val_euro, duration, raw_caller_number, raw_called_number, timestamp, event_time, carrier_in, carrier_out, selling_dest)
       VALUES (?, ?, ?, ?, ?, ?, ?::timestamp, ?::timestamp, ?, ?, ?)
       ON CONFLICT (xdrid) DO UPDATE SET tenant = EXCLUDED.tenant, val_euro = EXCLUDED.val_euro, duration = EXCLUDED.duration, raw_caller_number = EXCLUDED.raw_caller_number, raw_called_number = EXCLUDED.raw_called_number, timestamp = EXCLUDED.timestamp, event_time = EXCLUDED.event_time, carrier_in = EXCLUDED.carrier_in, carrier_out = EXCLUDED.carrier_out, selling_dest = EXCLUDED.selling_dest",
      "xdrid", "tenant", "val_euro", "duration", "raw_caller_number", "raw_called_number", "timestamp", "event_time", "carrier_in", "carrier_out", "selling_dest"
    ]
  }
}