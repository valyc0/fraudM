# version: '3.8'

services:
  # CSV Generator Service
  csv-generator:
    build:
      context: ./simulatore-python
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    volumes:
      - ./data:/data
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - fraud-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fraud-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 720
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    networks:
      - fraud-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - fraud-network

  # Logstash CSV to Kafka
  logstash-input:
    image: docker.elastic.co/logstash/logstash:8.12.1
    volumes:
      - ./logstash/pipeline/csv-to-kafka.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./data:/data
    environment:
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
    depends_on:
      - kafka
    networks:
      - fraud-network

  # Logstash Kafka to PostgreSQL
  logstash-postgres:
    image: docker.elastic.co/logstash/logstash:8.12.1
    volumes:
      - ./logstash/pipeline/kafka-to-postgres.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/jdbc:/usr/share/logstash/jdbc
    environment:
      LS_JAVA_OPTS: '-Xmx512m -Xms512m'
    command: |
      bash -c '
      bin/logstash-plugin install logstash-output-jdbc &&
      /usr/local/bin/docker-entrypoint'
    depends_on:
      - kafka
      - postgres
    networks:
      - fraud-network

  # Logstash Kafka to OpenSearch
  logstash-output:
    image: opensearchproject/logstash-oss-with-opensearch-output-plugin:7.16.2
    volumes:
      - ./logstash/pipeline/kafka-to-opensearch.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
    depends_on:
      - kafka
      - opensearch
    networks:
      - fraud-network

  # OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.11.1
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - DISABLE_SECURITY_PLUGIN=true
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - '9200:9200'
      - '9600:9600'
    networks:
      - fraud-network

  # OpenSearch Dashboards
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1
    ports:
      - '5601:5601'
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    depends_on:
      - opensearch
    networks:
      - fraud-network

  # Grafana
  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-opensearch-datasource
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - opensearch
    networks:
      - fraud-network

  # PostgreSQL Service
  postgres:
    image: postgres:17.4
    restart: always
    shm_size: 128mb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    volumes:
      - ./postgres/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - fraud-network

  # Adminer service for PostgreSQL management
  adminer:
    image: adminer
    restart: always
    ports:
      - "8090:8080"
    networks:
      - fraud-network
    depends_on:
      - postgres

networks:
  fraud-network:
    external: true

volumes:
  opensearch-data: {}
  data: {}
  postgres-data: {}